#####################################################################
# GrÃ¡fica del modelo de Momios proporcionales

# RecuÃ©rdese que beta10 < beta20 < beta30
beta<-c(0, 2, 4, 2) #beta10, beta20, beta30, beta1: J=4
x.range<-c(-5, 3)

x11(width = 10, height = 6, pointsize = 12)

# pdf(file = "c:\\figures\\Figure3.4color.pdf", width = 8, height = 6, colormodel = "cmyk")   # Create plot for book
par(mfrow = c(1, 2))
curve(expr = plogis(q = beta[1] + beta[4]*x), xlim = x.range, ylab = expression(P(Y<=j)),
      xlab = expression(x[1]), main = "Probabilidades Acumulativas para Y", lwd = 2)
curve(expr = plogis(q = beta[2] + beta[4]*x), add = TRUE, lty = "dashed", col = "red", lwd = 2)
curve(expr = plogis(q = beta[3] + beta[4]*x), add = TRUE, lty = "dotted", , col = "blue", lwd = 2)
legend(x = -5.5, y = 0.9, legend = c(expression(P(Y<=1)), expression(P(Y<=2)), expression(P(Y<=3))),
       lty = c("solid", "dashed", "dotted", "dotdash"), col = c("black", "red", "blue"),
       bty = "n", lwd = 2)

curve(expr = plogis(q = beta[1] + beta[4]*x), xlim = x.range, ylab = expression(pi[j]),
      xlab = expression(x[1]), main = "Probabilidades para Y", lwd = 2)
curve(expr = plogis(q = beta[2] + beta[4]*x) - plogis(q = beta[1] + beta[4]*x), add = TRUE,
      lty = "dashed", col = "red", lwd = 2)
curve(expr = plogis(q = beta[3] + beta[4]*x) - plogis(q = beta[2] + beta[4]*x), add = TRUE,
      lty = "dotted", , col = "blue", lwd = 2)
curve(expr = 1 - plogis(q = beta[3] + beta[4]*x), add = TRUE,
      lty = "dotdash", col = "green", lwd = 2)
legend(x = -5.5, y = 0.9, legend = c(expression(pi[1]), expression(pi[2]), expression(pi[3]), expression(pi[4])),
       lty = c("solid", "dashed", "dotted", "dotdash"), col = c("black", "red", "blue", "green"),
       bty = "n", lwd = 2)
# dev.off()  # Create plot for book



################EJEMPLO DE VALORES NUMÉRICOS (TRIGO.R)


}


###################################################################################
# Modelos de momios proporcionales 

library(MASS)  

# Reordenando tal que Scab < Sprout < Healthy
levels(wheat$type)
wheat$type.order<-factor(wheat$type, levels = c("Scab",  "Sprout", "Healthy"))
head(wheat)
levels(wheat$type.order)
# Manera alterna:
# ordered(x = wheat$type, levels = c("Scab",  "Sprout", "Healthy"))  #Also will do ordering
# within(data = wheat, expr = type.ordered<-ordered(x = wheat$type, levels = c("Scab",  "Sprout", "Healthy")))


# Modelo con todas las variables independientes
mod.fit.ord<-polr(formula = type.order ~ class + density + hardness + size + weight + moisture, data = wheat, method = "logistic")
class(mod.fit.ord)
summary(mod.fit.ord)
library(car)  
Anova(mod.fit.ord)

################################
# Calcular la probabilidad de caer en una categorÃ­a en particular

pi.hat.ord<-predict(object = mod.fit.ord, type = "probs")
head(pi.hat.ord)

# Ejemplo con argumento newdata
predict(object = mod.fit.ord, newdata = wheat[1,], type = "probs")

# PredicciÃ³n de las clasificaciones
head(predict(object = mod.fit.ord, type = "class"))

# funciÃ³n delthaMethod.pol2
deltaMethod.polr2<-function(object, g)  {
  beta.hat<-c(-object$coefficients, object$zeta)
  
  numb.slope<-length(object$coefficients)
  numb.int<-length(object$zeta)
  
  names(beta.hat)<-c(paste("b", 1:numb.slope, sep=""), paste("b", 1:numb.int, "0", sep=""))
  
  cov.mat<-vcov(object)
  cov.mat[1:numb.slope, (numb.slope + 1):(numb.slope + numb.int)]<-
    -cov.mat[1:numb.slope, (numb.slope + 1):(numb.slope + numb.int)]
  cov.mat[(numb.slope + 1):(numb.slope + numb.int), 1:numb.slope]<-
    -cov.mat[(numb.slope + 1):(numb.slope + numb.int), 1:numb.slope]
  
  deltaMethod(object = beta.hat, g = g, vcov. = cov.mat)
}

# La funciÃ³n deltaMethod.polr2 no tiene un argumento para indicar 
# el nombre de los parÃ¡metros, Ã©stos son creados durante la ejecuciÃ³n de 
# la funciÃ³n
x1<-0;          x2<-wheat[1,2]; x3<-wheat[1,3]
x4<-wheat[1,4]; x5<-wheat[1,5]; x6<-wheat[1,6]

alpha<-0.05

# Cadenas de caracteres
scab<-"exp(b10 + b1*x1 + b2*x2 + b3*x3 + b4*x4 + b5*x5 + b6*x6)"
sprout<-"exp(b20 + b1*x1 + b2*x2 + b3*x3 + b4*x4 + b5*x5 + b6*x6)"

# pi^_Scab
g.scab<-paste(scab, "/ (1 + ", scab, ")")
g.scab
calc.scab<-deltaMethod.polr2(object = mod.fit.ord, g = g.scab)
calc.scab$Estimate + qnorm(p = c(alpha/2, 1-alpha/2))*calc.scab$SE

# pi^_Sprout
g.sprout<-paste(sprout, "/ (1 + ", sprout, ")", " - ", scab, "/ (1 + ", scab, ")")
g.sprout
calc.sprout<-deltaMethod.polr2(object = mod.fit.ord, g = g.sprout)
calc.sprout$Estimate + qnorm(p = c(alpha/2, 1-alpha/2))*calc.sprout$SE

# pi^_Healthy
g.healthy<-paste("1 - ", sprout, "/ (1 + ", sprout, ")")
g.healthy
calc.healthy<-deltaMethod.polr2(object = mod.fit.ord, g = g.healthy)
calc.healthy$Estimate  # pi^_Healthy
calc.healthy$SE  # sqrt(Var^(pi^_Healthy))
calc.healthy$Estimate + qnorm(p = c(alpha/2, 1-alpha/2))*calc.healthy$SE


################################
# GrÃ¡ficas

x11(width = 7, height = 6, pointsize = 12)

# EstimaciÃ³n del modelo con densidad como Ãºnica variable independiente
mod.fit.dens<-polr(formula = type.order ~ density, data = wheat, method = "logistic")
summary(mod.fit.dens)

min(wheat$density)
max(wheat$density)

# pdf(file = "c:\\figures\\Figure3.5color.pdf", width = 7, height = 6, colormodel = "cmyk")   
curve(expr = 1/(1 + exp(beta.hat[1,1] + beta.hat[1,2]*x) + exp(beta.hat[2,1] + beta.hat[2,2]*x)), ylab = expression(hat(pi)), xlab = "Density",
      xlim = c(min(wheat$density), max(wheat$density)), col = "black", lty = "solid", lwd = 2, n = 1000, type = "n",
      panel.first = grid(col = "gray", lty = "dotted"))
lwd.mult<-2
# GrÃ¡fica de cada pi_j para el modelo de regresiÃ³n multinomial
curve(expr = 1/(1 + exp(beta.hat[1,1] + beta.hat[1,2]*x) + exp(beta.hat[2,1] + beta.hat[2,2]*x)),
      col = "black", lty = "solid", lwd = lwd.mult, n = 1000, add = TRUE,
      xlim = c(min(wheat$density[wheat$type == "Healthy"]), max(wheat$density[wheat$type == "Healthy"])))  # Healthy
curve(expr = exp(beta.hat[1,1] + beta.hat[1,2]*x)/(1 + exp(beta.hat[1,1] + beta.hat[1,2]*x) + exp(beta.hat[2,1] + beta.hat[2,2]*x)),
      col = "green", lty = "dotdash", lwd = lwd.mult, n = 1000, add = TRUE,
      xlim = c(min(wheat$density[wheat$type == "Scab"]), max(wheat$density[wheat$type == "Scab"])))  # Scab
curve(expr = exp(beta.hat[2,1] + beta.hat[2,2]*x)/(1 + exp(beta.hat[1,1] + beta.hat[1,2]*x) + exp(beta.hat[2,1] + beta.hat[2,2]*x)),
      col = "red", lty = "longdash", lwd = lwd.mult, n = 1000, add = TRUE,
      xlim = c(min(wheat$density[wheat$type == "Sprout"]), max(wheat$density[wheat$type == "Sprout"])))  # Sprout

lwd.po<-4
# GrÃ¡fica de cada pi_j para el modelo de momios proporcionales
curve(expr = plogis(q = mod.fit.dens$zeta[1] - mod.fit.dens$coefficients*x), col = "green",
      type = "l", xlim = c(min(wheat$density[wheat$type.order == "Scab"]), max(wheat$density[wheat$type.order == "Scab"])),
      add = TRUE, lty = "dotdash", lwd = lwd.po, n = 1000)  # Scab
curve(expr = plogis(q = mod.fit.dens$zeta[2] - mod.fit.dens$coefficients*x) - plogis(q =mod.fit.dens$zeta[1] - mod.fit.dens$coefficients*x), col = "red",
      type = "l", xlim = c(min(wheat$density[wheat$type.order == "Sprout"]), max(wheat$density[wheat$type.order == "Sprout"])),
      add = TRUE, lty = "longdash", lwd = lwd.po, n = 1000)  # Sprout
curve(expr = 1 - plogis(q = mod.fit.dens$zeta[2] - mod.fit.dens$coefficients*x), col = "black",
      type = "l", xlim = c(min(wheat$density[wheat$type.order == "Healthy"]), max(wheat$density[wheat$type.order == "Healthy"])),
      add = TRUE, lty = "solid", lwd = lwd.po, n = 1000)  # Healthy
legend(x = 1.4, y = 0.8, legend=c("Healthy", "Sprout", "Scab"), lty=c("solid","longdash","dotdash"),
       col=c("black","red","green"), bty="n", lwd = c(2,2,2), seg.len = 4)
# dev.off()  # Create plot for book



################################
# Razones de momios

# Se usa la funciÃ³n sd para calcular el valor del factor c
summary(wheat)
sd.wheat<-apply(X = wheat[,-c(1,7,8)], MARGIN = 2, FUN = sd)
c.value<-c(1, sd.wheat)
round(c.value, 2)  # class = 1 es el primer valor

# OR
round(exp(c.value*(-mod.fit.ord$coefficients)),2)
round(1/exp(c.value*(-mod.fit.ord$coefficients)),2)

# Intervalos de confianza
conf.beta<-confint(object = mod.fit.ord, level = 0.95)
conf.beta
c.value*(-conf.beta)
c.value[2]*(-conf.beta[2,])

ci<-exp(c.value*(-conf.beta))
round(data.frame(low = ci[,2], up = ci[,1]), 2)
round(data.frame(low = 1/ci[,1], up = 1/ci[,2]), 2)

# Ejemplo considerando sÃ³lo la variable density
confint(object = mod.fit.ord, parm = "density", level = 0.95)  

# Wald
vcov(mod.fit.ord) 
beta.ci<-(-mod.fit.ord$coefficients[2]) + qnorm(p = c(0.025, 0.975))*sqrt(vcov(mod.fit.ord)[2,2])
beta.ci
round(rev(1/exp(beta.ci*c.value[2])),2)


